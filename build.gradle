plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// OkHttp 核心库
	modImplementation include("com.squareup.okhttp3:okhttp:4.10.0")
	// OkHttp 日志拦截器
	modImplementation include("com.squareup.okhttp3:logging-interceptor:4.10.0")
	// OkHttp 的底层 I/O 库
	modImplementation include("com.squareup.okio:okio:3.0.0")
	// Kotlin 标准库
	modImplementation include("org.jetbrains.kotlin:kotlin-stdlib:1.9.0")
	// Kotlin 反射库（某些 OkHttp 功能需要）
	modImplementation include("org.jetbrains.kotlin:kotlin-reflect:1.9.0")
	// .env 支持
	modImplementation include("io.github.cdimascio:dotenv-java:3.0.0")
	// JNA（dotenv-java 的依赖）
	modImplementation include("net.java.dev.jna:jna:5.13.0")

	// 测试依赖
	testImplementation 'junit:junit:4.13.2'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
	// 只包含必要的依赖
	def includeDeps = [
			"okhttp",
			"okio",
			"kotlin",
			"dotenv",
			"jna"
	]

	from {
		configurations.runtimeClasspath
				.findAll { dep ->
					includeDeps.any { name -> dep.name.contains(name) }
				}
				.collect { it.isDirectory() ? it : zipTree(it) }
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}